use crate::{
    cloudflare::{Cloudflare, Record, Service},
    config::Config,
};

pub fn configure() {
    let config = match Config::open() {
        Some(config) => config,
        None => panic!("The project must be bootstrapped before configuring"),
    };

    let tunnel = match config.cloudflare.tunnel {
        Some(tunnel) => tunnel,
        None => panic!("The project must be bootstrapped before configuring"),
    };

    let website = config
        .cloudflare
        .website
        .expect("The project must be bootstrapped before configuring");

    let cloudflare = Cloudflare::new(
        config.cloudflare.user.api_token.clone().unwrap(),
        config.cloudflare.user.email.clone().unwrap(),
    );

    let services: Vec<_> = config
        .ports
        .iter()
        .map(|(service, port)| Service {
            name: service.clone(),
            port: *port,
        })
        .collect();

    cloudflare.configure_tunnel(
        config.cloudflare.account.unwrap().id,
        &tunnel.id,
        &website,
        &services,
    );

    println!("Successfully configured tunnel");

    let records = cloudflare.list_dns_records(&website.id);
    for record in &records {
        if services
            .iter()
            .find(|service| format!("{}.{}", service.name, website.name) == record.name)
            .is_some()
        {
            if !record.content.ends_with(".cfargotunnel.com") {
                eprintln!(
                    "Record {} ({}) not deleted since it doesn't point to an Argo tunnel ({})",
                    record.name, record.id, record.content
                );
                continue;
            }

            cloudflare.delete_dns_record(&website.id, &record.id);
            println!("Deleted record: {} ({})", record.name, record.id);
        }
    }

    for service in services {
        let record = Record {
            id: "unused".to_string(),
            name: format!("{}.{}", service.name, website.name),
            content: format!("{}.cfargotunnel.com", tunnel.id),
            record_type: "CNAME".to_string(),
            comment: Some(format!("[AUTOGENERATED] Tunnel to {}", service.name)),
        };

        cloudflare.create_dns_record(&website.id, &record);
        println!("Created record: {}.{}", service.name, website.name);
    }

    println!("Successfully configured the tunnel");
}
